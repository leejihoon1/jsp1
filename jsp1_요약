1 JSP 문법
1) 스크스트립 <%   %>
		-> 자바코드 작성
2) 표현식 : <&=   &>
		-> 태그 요소에 추력내용 작성
3) 지시자 : <&@page   &>
		->jsp 파일정보 작성 및 import
		: <%@include %>

2. jsp 내장객체
여러 내장객체들 중 다루엇던 것
1) out : html 문서에 출력
		-> 태그, 스타일, 자바스크립트 적용
2) request : 요청 단일 객체
		-> getParemeter 메소드 : 요청의 쿼리스트링, form 요소값을 가져온다.
		-> 요청과 관련된 값들 가져오는 getXXX메소드가 있습니다. (day2 : request_object.jsp참고)
3) response : 응답 전달 객체
		-> setCharacterEncoding 메소드  : form 요소 값을 post방식으로 가져올 때 필요
		-> sendRedirect 메소드 : 응답으로 새로운 요청을 보냅니다.

지금까지 햇던 소스에서 자바코드와 html 태그를 분리시키겟습니다. - > 디자인과 서버구현을 분리(협업을 위해)
	->서버 구현 소스는 .java(자바 클래스)에 작성을 합니다. 서블릿 또는 스프링프레임웍의 방식입니다.

3. JSP 애트리뷰트 : getAttribute, setAttribute 메소드로 데이터 저장(또는 읽기)을 합니다.
	-> 데이터를 저장하는 객체에 따라 scope(범위)이 다릅니다.
	-> 애트리뷰트 데이터의 타입은 Object : 모든 타입의 데이터를 저장할 수 있습니다.
	-> getAttribute 의 리턴타입도 Object

	1) request : 요청객체가 유지되는 동안데이터를 저장
		-> 사용자 각각 특정 요청에 대해서 1번만 데이터를 저장/접근 목적으로 사용
	2) session : 연결된 브라우저 객체가 유지되는 동안 데이터를 저장
		-> 로그인/로그아웃 처리는 session 객체를 사용합니다.
	3) application : 프로그램(웹프로젝트)이 실행 중인 프로그램에 데이터를 저장.(톰캣이 중단되지 않는다면 계속 저장)
		-> 같은 프로그램을 사용하는 사용자들은 모두 동일한 애트리뷰트 이름에 대해서는 같은 값을 접근합니다. 

데이터를 저장할 때 수명 (life cycle)은 application > session > request순서 입니다.

4. request 객체에 애트리뷰트로 데이터 저장하기.
	PageContext.forward 명령과 같이 사용됩니다. : 요청을 다른 jsp페이지에 전달합니다.

	ex) forward_test.jsp로 발생된 요청을 c.jsp에 전달합니다. 
	: forward_test.jsp와 c.jsp의 request 객체는 동일하다. request 제어는 c.jsp에서 합니다.

기본적인 동작은 
사용자 url -> a.jsp에 대한 request 객체
		 -> b.jsp에 대한 request 객체  
		 
5. jsp2프로젝트에서 자세히 합니다. 테스트만 session에 애트리뷰트 저장하기 해봅니다.

6. el : expression language (표현식 <%= %>보다 쉽게 여러가지 데이터 출력을 할 수 이쓴 기술입니다.)
	->주로 애트리뷰트의 값을 * 찾아서 가져와 * *출력*합니다.
	(requestScope-> sessionScope-> applicationScope 순서로 찾습니다.) 
		 
		 
		 
		 
		 